import math
import time

# --- An "insecure" RSA public modulus, n ---
# Let's assume this is a public key, n, that we have intercepted from the network.
# It has been created by multiplying two 3-digit prime numbers.
UNSAFE_RSA_MODULUS_N = 145919  # e.g., 317 * 461

# --- 1. Generate all 3-digit prime numbers ---
def get_primes_in_range(start, end):
    """Finds all prime numbers within a given range."""
    primes = []
    for num in range(start, end + 1):
        if num > 1:
            # Check for any factors
            is_prime = True
            for i in range(2, int(math.sqrt(num)) + 1):
                if (num % i) == 0:
                    is_prime = False
                    break
            if is_prime:
                primes.append(num)
    return primes

print("Step 1: Finding all 3-digit prime numbers (between 100 and 999)...")
start_time = time.time()
three_digit_primes = get_primes_in_range(100, 999)
end_time = time.time()
print(f"Done! Found {len(three_digit_primes)} 3-digit prime numbers. Time taken: {end_time - start_time:.4f} seconds\n")

# --- 2. Brute-force: multiply the primes in pairs ---
def find_factors(target_n, primes_list):
    """
    Tries multiplying the numbers in the prime list in pairs
    to see if the product equals the target number, n.
    """
    print(f"Step 2: Starting brute-force attack. Target modulus n = {target_n}")
    num_primes = len(primes_list)
    # Use a nested loop to iterate through all possible pairs of primes
    for i in range(num_primes):
        p = primes_list[i]
        for j in range(i, num_primes):  # Start from i to avoid duplicate calculations (p*q and q*p)
            q = primes_list[j]
            
            # Check the product
            if p * q == target_n:
                return p, q  # Found them!
    return None, None  # Not found

start_time = time.time()
p, q = find_factors(UNSAFE_RSA_MODULUS_N, three_digit_primes)
end_time = time.time()

# --- 3. Output the result ---
if p and q:
    print(f"\nSuccess! Cracked the RSA modulus {UNSAFE_RSA_MODULUS_N}")
    print(f"Its prime factors are p = {p} and q = {q}")
else:
    print(f"\nFactors for {UNSAFE_RSA_MODULUS_N} were not found in the list of 3-digit primes.")

print(f"Cracking process took: {end_time - start_time:.4f} seconds")

print("\n*** IMPORTANT REMINDER ***")
print("This program is only effective for extremely small numbers.")
print("For RSA-2048, its prime factors are 309 digits long. The number of primes and the amount of computation required would be astronomical,")
print("making it physically impossible to complete.")
